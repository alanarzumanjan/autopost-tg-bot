from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher.filters import Text
from bot.db.session import SessionLocal
from bot.db.models import User, UserChannel
from aiogram import Bot
from functools import partial


def get_tariff_keyboard():
    return InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("Free", callback_data="tariff_free"),
        InlineKeyboardButton("Basic", callback_data="tariff_basic"),
        InlineKeyboardButton("Pro", callback_data="tariff_pro"),
    )


async def register_autogen(message: types.Message):
    user_id = message.from_user.id
    db = SessionLocal()
    user = db.query(User).filter_by(tg_id=user_id).first()

    if not user:
        user = User(tg_id=user_id, registration_step="awaiting_tariff")
        db.add(user)
        db.commit()
        await message.answer(
            "üöÄ –î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
            reply_markup=get_tariff_keyboard(),
        )
    elif user.registration_step:
        if user.registration_step == "awaiting_tariff":
            await message.answer(
                "üîÅ –í—ã –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
                reply_markup=get_tariff_keyboard(),
            )
        elif user.registration_step == "awaiting_channel":
            await message.answer(
                "üîÅ –í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ. –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ @username –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞."
            )
    else:
        await message.answer(
            "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /addprompt"
        )
    db.close()


async def tariff_chosen(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    tariff = callback.data.split("_")[1]

    db = SessionLocal()
    user = db.query(User).filter_by(tg_id=user_id).first()
    if not user:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏—Ç–µ /register_autogen")
        db.close()
        return

    user.subscription_level = tariff
    user.registration_step = "awaiting_channel"
    db.commit()
    db.close()

    await callback.message.edit_reply_markup()
    await callback.message.answer(
        f"‚úÖ –¢–∞—Ä–∏—Ñ <b>{tariff}</b> –≤—ã–±—Ä–∞–Ω.\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ @username –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.",
        parse_mode="HTML",
    )


async def channel_received(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    db = SessionLocal()
    user = db.query(User).filter_by(tg_id=user_id).first()

    if not user or user.registration_step != "awaiting_channel":
        db.close()
        return

    channel_id_raw = message.text.strip()

    # üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –∫–∞–Ω–∞–ª, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ title
    try:
        chat = await bot.get_chat(channel_id_raw)
        channel_title = chat.title
        tg_channel_id = channel_id_raw
    except Exception as e:
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
            f"1. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
            f"2. –í—ã —É–∫–∞–∑–∞–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username –∏–ª–∏ chat_id\n\n–û—à–∏–±–∫–∞: {e}"
        )
        db.close()
        return

    # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: –∫–∞–Ω–∞–ª —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º?
    existing = (
        db.query(UserChannel)
        .filter_by(tg_channel_id=tg_channel_id, user_id=user.id)
        .first()
    )

    if existing:
        await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤–∞–º–∏ —Ä–∞–Ω–µ–µ.")
        db.close()
        return

    # ‚úÖ –°–æ–∑–¥–∞—ë–º –∫–∞–Ω–∞–ª
    new_channel = UserChannel(
        user_id=user.id,
        tg_channel_id=tg_channel_id,
        title=channel_title,
        is_active=True,
    )
    db.add(new_channel)

    user.registration_step = None
    db.commit()
    db.close()

    await message.answer(
        f"‚úÖ –ö–∞–Ω–∞–ª <b>{channel_title}</b> (@{tg_channel_id}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /addprompt –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–º—Ç–∞.",
        parse_mode="HTML",
    )


def register_handler(dp: Dispatcher, bot: Bot):
    dp.register_message_handler(register_autogen, commands=["register_autogen"])
    dp.register_callback_query_handler(tariff_chosen, Text(startswith="tariff_"))
    dp.register_message_handler(
        partial(channel_received, bot=bot), content_types=types.ContentType.TEXT
    )
