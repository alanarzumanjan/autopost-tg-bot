from aiogram import types
from aiogram.dispatcher import Dispatcher
from bot.db.session import SessionLocal
from bot.db.models import User, UserChannel

VALID_TEMPLATES = {
    "smart": "üìò –£–º–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π",
    "bold": "üî• –î–µ—Ä–∑–∫–∏–π –∏ —É–≤–µ—Ä–µ–Ω–Ω—ã–π",
    "educational": "üéì –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π",
    "twitter": "üê¶ –ö—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É",
    "story": "üìñ –ß–µ—Ä–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏",
}


async def settemplate_handler(message: types.Message):
    args = message.get_args().strip().split()
    user_id = message.from_user.id

    if len(args) != 2:
        await message.reply(
            "‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n<code>/settemplate @–∫–∞–Ω–∞–ª —Å—Ç–∏–ª—å</code>\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏:\n"
            + "\n".join([f"{k} ‚Äî {v}" for k, v in VALID_TEMPLATES.items()]),
            parse_mode="HTML",
        )
        return

    channel_id, template = args[0], args[1].lower()

    if template not in VALID_TEMPLATES:
        await message.reply(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∏–ª—å. –î–æ–ø—É—Å—Ç–∏–º—ã–µ:\n" + ", ".join(VALID_TEMPLATES.keys())
        )
        return

    db = SessionLocal()
    user = db.query(User).filter_by(tg_id=user_id).first()
    if not user:
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        db.close()
        return

    channel = (
        db.query(UserChannel)
        .filter_by(user_id=user.id, tg_channel_id=channel_id)
        .first()
    )
    if not channel:
        await message.reply("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
        db.close()
        return

    channel.template = template
    db.commit()
    db.close()

    await message.reply(
        f"‚úÖ –°—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è {channel_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{VALID_TEMPLATES[template]}</b>",
        parse_mode="HTML",
    )


def register_settemplate_handler(dp: Dispatcher):
    dp.register_message_handler(settemplate_handler, commands=["settemplate"])
