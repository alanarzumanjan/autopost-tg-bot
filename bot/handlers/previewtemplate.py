from aiogram import types
from aiogram.dispatcher import Dispatcher
from bot.generator.generator import generate_post

VALID_TEMPLATES = ["smart", "bold", "educational", "twitter", "story"]


async def previewtemplate_handler(message: types.Message):
    args = message.get_args().strip().lower()
    print(f"üëâ /previewtemplate –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {args}")

    if not args or args not in VALID_TEMPLATES:
        await message.reply(
            "‚ùó –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n<code>/previewtemplate —Å—Ç–∏–ª—å</code>\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏: " + ", ".join(VALID_TEMPLATES),
            parse_mode="HTML",
        )
        return

    await message.reply(
        f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–∏–º–µ—Ä —Å—Ç–∏–ª—è <b>{args}</b>...", parse_mode="HTML"
    )

    post = await generate_post(template=args)

    if post:
        await message.answer(post, parse_mode="HTML")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä.")


def register_previewtemplate_handler(dp: Dispatcher):
    dp.register_message_handler(previewtemplate_handler, commands=["previewtemplate"])
