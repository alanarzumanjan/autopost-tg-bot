from aiogram import types
from aiogram.dispatcher import Dispatcher
from bot.db.session import SessionLocal
from bot.db.models import User
from bot.config import PAYMENT_PROVIDER_TEST

# üí∞ –¢–∞—Ä–∏—Ñ—ã –∏ —Ü–µ–Ω—ã (–≤ –µ–≤—Ä–æ * 100)
TARIFFS = {
    "basic": {"title": "Basic", "amount": 299, "desc": "2 –ø–æ—Å—Ç–∞ –≤ –¥–µ–Ω—å"},
    "pro": {"title": "Pro", "amount": 599, "desc": "5 –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å"},
    "unlimited": {"title": "Unlimited", "amount": 999, "desc": "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"},
}

CURRENCY = "EUR"


async def settariff_handler(message: types.Message):
    args = message.get_args().strip().lower()
    user_id = message.from_user.id

    if not args or args not in TARIFFS:
        text = "<b>üí≥ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:</b>\n"
        for key, val in TARIFFS.items():
            text += f"/settariff {key} ‚Äî {val['title']} ({val['amount'] / 100:.2f}‚Ç¨)\n"
        await message.reply(text, parse_mode="HTML")
        return

    selected = TARIFFS[args]

    prices = [types.LabeledPrice(label=selected["title"], amount=selected["amount"])]

    await message.bot.send_invoice(
        chat_id=message.chat.id,
        title=f"–¢–∞—Ä–∏—Ñ: {selected['title']}",
        description=selected["desc"],
        payload=f"tariff_{args}",
        provider_token=PAYMENT_PROVIDER_TEST,
        currency=CURRENCY,
        prices=prices,
        start_parameter="settariff-payment",
    )


async def successful_payment_handler(message: types.Message):
    user_id = message.from_user.id
    payload = message.successful_payment.invoice_payload

    if not payload.startswith("tariff_"):
        return

    tariff = payload.split("_")[1]

    db = SessionLocal()
    user = db.query(User).filter_by(tg_id=user_id).first()
    if user:
        user.subscription_level = tariff
        db.commit()
        await message.reply(
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–¢–∞—Ä–∏—Ñ <b>{tariff}</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
            parse_mode="HTML",
        )
    else:
        await message.reply("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
    db.close()


def register_settariff_handler(dp: Dispatcher):
    dp.register_message_handler(settariff_handler, commands=["settariff"])
    dp.register_message_handler(
        successful_payment_handler, content_types=types.ContentType.SUCCESSFUL_PAYMENT
    )
