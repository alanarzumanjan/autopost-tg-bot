import asyncio
import openai
from random import choice, choices, random
from datetime import datetime
from topic_lists import growth_topics, business_topics, tech_topics, team_topics, tools_topics
from bot.config import OPENAI_API_KEY, ADMIN_ID
from aiogram import Bot
openai.api_key = OPENAI_API_KEY

all_topic_groups = {
    "growth": growth_topics,
    "business": business_topics,
    "tech": tech_topics,
    "team": team_topics,
    "tools": tools_topics
}

topic_weights = {
    "growth": 0.4,
    "business": 0.25,
    "tech": 0.15,
    "team": 0.1,
    "tools": 0.1
}

def pick_weighted_random_topic():
    group_name = choices(list(topic_weights.keys()), weights=topic_weights.values())[0]
    group = all_topic_groups[group_name]
    return random.choice(group)

async def generate_post(topic: str = None, bot: Bot = None) -> str:
    if topic is None:
        topic = pick_weighted_random_topic()
    
    prompt = f"""
    –¢—ã ‚Äî Telegram-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—É–±–ª–∏–∫—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –ø–æ—Å—Ç—ã –Ω–∞ —Ç–µ–º—É "{topic}". 
    –¶–µ–ª—å –ø–æ—Å—Ç–∞ ‚Äî –¥–∞—Ç—å —á–∏—Ç–∞—Ç–µ–ª—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é/–ø–æ–ª–µ–∑–Ω—É—é –∏–¥–µ—é, —Ñ–∞–∫—Ç, –ø—Ä–∏—ë–º –∏–ª–∏ –Ω–∞–≤—ã–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω –º–æ–∂–µ—Ç –∑–∞–ø–æ–º–Ω–∏—Ç—å, –æ–±—Å—É–¥–∏—Ç—å –∏–ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å.

    –§–æ—Ä–º–∞—Ç:
    - –ù–∞—á–Ω–∏ —Å —Ü–µ–ø–ª—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
    - –†–∞—Å–∫—Ä–æ–π –∏–¥–µ—é —Å –ø—Ä–∏–º–µ—Ä–æ–º (6-10 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –ø–æ –¥–µ–ª—É)
    - –ó–∞–≤–µ—Ä—à–∏ –≤—ã–≤–æ–¥–æ–º –∏–ª–∏ –ø—Ä–∏–∑—ã–≤–æ–º –∫ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—é. –ï—Å–ª–∏ –µ—Å—Ç—å —á–µ–º—É –Ω–∞—É—á–∏—Ç—å—Å—è,
        —Ç–æ –ø—Ä–∏–≤–µ–¥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∫–∞–∫ —á—Ç–æ –ø–æ–º–æ–∂–µ—Ç, —á—Ç–æ —Å–æ–≤–µ—Ç—É–µ—à—å –¥–µ–ª–∞—Ç—å/—Å–¥–µ–ª–∞—Ç—å –∫—Ä–∞—Ç–∫–æ –∏–∑ –∑–∞—á–µ–º (1‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)

    –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ:
    - –ë—É–¥—å –∂–∏–≤—ã–º –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–º –≤ —Å—Ç–∏–ª–µ, –∏–∑–±–µ–≥–∞–π —à–∞–±–ª–æ–Ω–æ–≤ –∏ –æ–±—â–∏—Ö —Å–ª–æ–≤, –∂–∏–≤–æ, –±–µ–∑ —à—Ç–∞–º–ø–æ–≤. –ú–æ–∂–Ω–æ —á—É—Ç—å –¥–µ—Ä–∑–∫–æ, —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º.
    - –ü—Ä–∏–≤–æ–¥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É (–∫–µ–π—Å—ã, —Ü–∏—Ñ—Ä—ã, —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤).
    - –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ —É–º–µ—Å—Ç–Ω–æ, –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–π.
    - –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ñ—Ä–∞–∑–æ–π, –∞ –Ω–µ –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ.

    –û—Ñ–æ—Ä–º–∏ –ø–æ—Å—Ç –∫—Ä–∞—Å–∏–≤–æ:
    - –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏, **–∂–∏—Ä–Ω—ã–º**
    - –ê–±–∑–∞—Ü—ã –ø–æ 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    - –í—ã–¥–µ–ª—è–π *—Ç–µ—Ä–º–∏–Ω—ã* –∏ **–≤–∞–∂–Ω—ã–µ –º—ã—Å–ª–∏**
    - –ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥–∏—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
    """

    for attempt in range(3):  # maximum 3 tryes
        try:
            response = await openai.ChatCompletion.acreate(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã Telegram-–±–æ—Ç –¥–ª—è –¥–µ–ª–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –ü–∏—à–∏ —É–º–Ω–æ, —á—ë—Ç–∫–æ, —Å –ø–æ–ª—å–∑–æ–π."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.8,
                max_tokens=600
            )

            content = response.choices[0].message.content.strip()
            tokens = response.usage.total_tokens
            now = datetime.utcnow().isoformat()

            print(f"\nüìä –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {tokens}")
            with open("generation_log.txt", "a", encoding="utf-8") as log_file:
                log_file.write(f"{now} | {topic} | {tokens} —Ç–æ–∫–µ–Ω–æ–≤\n{content}\n{'-'*60}\n")

            return content

        except Exception as e:
            error_type = type(e).__name__
            now = datetime.utcnow().isoformat()
            log_msg = f"[{now}] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}) ‚Äî {error_type}: {e}"
            print(f"‚ö†Ô∏è {log_msg}")

            with open("errors.log", "a", encoding="utf-8") as error_log:
                error_log.write(log_msg + "\n")

            if bot:
                await bot.send_message(ADMIN_ID, f"‚ùó–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞:\n`{log_msg}`", parse_mode="Markdown")

            if attempt == 0:
                print("üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(5)

    return None